# PART 1 : API Routing and HonoJS in Next.js: A Detailed Guide

## 1. Basic Next.js API Routing (Without HonoJS)

### a. Creating a Simple API Route

1. **Folder Structure:**

   ```
   /app
     └── /api
         └── /test
             └── route.ts
   ```

2. **`route.ts` Content:**

   ```ts
   import { NextResponse } from "next/server";

   export const GET = () => {
       return NextResponse.json({ message: "Hello from Hono!" });
   };
   ```

3. **Outcome:**

   - When you navigate to [http://localhost:3000/api/test](http://localhost:3000/api/test), the browser displays:
     ```json
     {
       "message": "Hello from Hono!"
     }
     ```

### b. Handling Parameters in API Routes

1. **Folder Structure for Parameterized Route:**

   ```
   /app
     └── /api
         └── /test
             ├── /[testId]
             │    └── route.ts
             └── route.ts   (optional for base /test)
   ```

2. **`route.ts` Content for Parameterized Route:**

   ```ts
   import { NextResponse } from "next/server";
   import { NextRequest } from "next/server";

   export const GET = (
       request: NextRequest, 
       { params }: { params: { testId: string } }
   ) => {
       return NextResponse.json({
           message: "Hello from Hono!",
           testId: params.testId,
       });
   };
   ```

3. **Outcome:**

   - When you navigate to [http://localhost:3000/api/test/123](http://localhost:3000/api/test/123), the browser displays:
     ```json
     {
       "message": "Hello from Hono!",
       "testId": "123"
     }
     ```

---

## 2. Implementing API Routing with HonoJS

_HonoJS_ is a lightweight web framework that allows you to write API routes in a more expressive way (similar to Express or FastAPI) and brings end-to-end type safety. Using HonoJS, you essentially **overwrite the existing Next.js file‑based route handlers** by handling the request via Hono. This means your API routes become managed by Hono, while the folder structure in `/app/api` remains, but the file (commonly `route.ts`) now delegates to Hono.

### a. Installing HonoJS

Use your preferred package manager:

```bash
# If using Bun:
bun add hono

# If using npm:
npm install hono

# If using yarn:
yarn add hono
```

### b. Creating API Routing with HonoJS

1. **File Structure:**

   You might reserve a folder for your Hono-powered routes, for example:

   ```
   /app
     └── /api
         └── [...route]
             └── route.ts
   ```

2. **`route.ts` Example (Basic Hono Setup):**

   ```ts
   import { Hono } from 'hono';
   import { handle } from 'hono/vercel';

   export const runtime = 'edge';  // Optional: specify the runtime

   // Initialize Hono app with a base path (since we are in /api)
   const app = new Hono().basePath('/api');

   // Define a GET route for /api/hello
   app.get('/hello', (c) => {
     return c.json({ message: 'Hello Next.js!' });
   });

   // Chain another route to handle parameters
   app.get('/hello/:test', (c) => {
     return c.json({
       message: 'Hello Next.js!',
       test: c.req.param('test'),
     });
   });

   // Export the handlers for GET and POST (and others if needed)
   export const GET = handle(app);
   export const POST = handle(app);
   ```

3. **Outcome:**

   - When navigating to [http://localhost:3000/api/hello/123](http://localhost:3000/api/hello/123), the response is:
     ```json
     {
       "message": "Hello Next.js!",
       "test": "123"
     }
     ```

### c. Explanation: Overwriting Next.js File-Based Route Handlers

- **File-Based Routing in Next.js:**  
  Normally, any file named `route.ts` in your `/app/api` directory automatically becomes an API endpoint using Next.js’ built-in handlers (like `NextResponse.json`).

- **Using HonoJS:**  
  By installing HonoJS and then defining your routes in a `route.ts` file using Hono’s API, you essentially "override" Next.js’ default routing behavior.  
  - Instead of using the standard `GET` export from Next.js, you use `handle(app)` from Hono, which forwards the request to your Hono app.  
  - This allows you to chain multiple routes (and even middleware) using Hono's syntax, which is more similar to other web frameworks (e.g., Express).

- **Benefits:**  
  - **Expressiveness:** Hono lets you define multiple endpoints in one file with chainable methods.  
  - **Type Safety:** With Hono, you get end-to-end TypeScript support, especially when using validators (like with Zod).  
  - **Flexibility:** You can handle routes, middlewares, and parameter validations in a modular way.

---

## 3. Chaining Routes for Parameter Handling (Advanced HonoJS Example)

To demonstrate chaining routes that handle parameters:

```ts
import { Hono } from 'hono';
import { handle } from 'hono/vercel';

export const runtime = 'edge';

const app = new Hono().basePath('/api');

app
  .get('/hello', (c) => {
    return c.json({ message: 'Hello Next.js!' });
  })
  .get('/hello/:test', (c) => {
    return c.json({
      message: 'Hello Next.js!',
      test: c.req.param('test'),
    });
  });

export const GET = handle(app);
export const POST = handle(app);
```

- **Route Chain Explanation:**
  - The first `app.get('/hello', ...)` handles the base `/api/hello` route.
  - The next `app.get('/hello/:test', ...)` handles routes with a parameter (e.g., `/api/hello/123`).
  - The `c.req.param('test')` function retrieves the value of the parameter, ensuring type safety and auto-completion.

---

## Summary

- **Basic Next.js API Routing:**  
  - Create API endpoints using file‑based routing in `/app/api`.
  - Use `NextResponse.json()` to return JSON responses.
  - Create parameterized routes by adding folders (e.g., `[testId]`).

- **HonoJS API Routing:**  
  - Install HonoJS and replace Next.js’ default API handlers with Hono’s handler via `handle(app)`.
  - Define routes using Hono’s chainable API.
  - Overwrite the file‑based route handler by handling the entire API route with Hono.
  - Easily chain routes for handling parameters.

- **Example Outcomes:**  
  - Basic Next.js API: [http://localhost:3000/api/test/123](http://localhost:3000/api/test/123) returns a JSON with the `testId`.  
  - HonoJS API: [http://localhost:3000/api/hello/123](http://localhost:3000/api/hello/123) returns a JSON with `message` and `test` parameter.



Below is a comprehensive set of notes covering the second half of the API routing with HonoJS, including RPC features, Zod validation, middleware chaining, protected routes with Clerk, and best practices for structuring your API routes:

---

# PART 2 : Advanced API Routing with HonoJS, RPC, and Zod in Next.js

## Overview

- **HonoJS** is a lightweight, high-performance web framework that allows you to define API routes in a chainable, expressive way.
- **RPC (Remote Procedure Call)** in Hono enables sharing API specifications between the server and client. It provides end-to-end type safety, especially when combined with Zod validators.
- Using HonoJS, you effectively "overwrite" Next.js’ native file‑based API routing. In your API route file (e.g., `route.ts`), instead of using Next.js’s `NextResponse.json()`, you delegate request handling to a Hono app. This allows you to chain multiple routes and middlewares.

---

## 1. Middleware Chaining in HonoJS

- **Middleware Role:**  
  In Hono, everything between the route declaration (e.g., `app.get('/hello', ...)`) and the final return of context is treated as middleware.
  
- **Purpose of Middlewares:**  
  - **Validation:** You can attach validators to ensure incoming parameters or JSON bodies conform to expected types.
  - **Authentication:** Protect routes by checking if a user is authenticated (for example, with Clerk middleware).
  - **Permission Protection:** Apply additional rules to restrict access.
  
- **Chaining:**  
  You can chain as many middleware functions as needed. This modular approach lets you compose validations and protections sequentially.

---

## 2. Integrating Zod for Validation

- **Installation:**  
  Install Zod (and the Hono-Zod integration if available) using your package manager:
  
  ```bash
  bun add zod
  bun add hono-zod-validator  # if you want an integration package, or you can just import Zod
  ```
  
- **Parameter Validation Example:**

  Instead of using:
  
  ```ts
  const test = c.req.param('test');
  ```
  
  You can validate using Zod:
  
```ts
import { handle } from 'hono/vercel'
import { z } from 'zod'
import { zValidator } from '@hono/zod-validator'

export const runtime = 'edge'

const app = new Hono().basePath('/api')

app
  .get('/hello', (c) => {
    return c.json({
      message: 'Hello Next.js!',
    })
  })
  .get(
    "/hello/:test",    // adding Zod validation to the parameters
    zValidator("param",
      z.object({
        test: z.string()
      })
    ),
    (c) => {  
      return c.json({
        message: 'Hello Next.js!',
        test: c.req.valid('param')
      })
    }
  )

export const GET = handle(app)
export const POST = handle(app)
```

- **Validating JSON Bodies for POST Requests:**

  For POST requests, define a schema for the expected JSON data:
  
  ```ts
  const bodySchema = z.object({
    name: z.string(),
    userId: z.string(),
  });

  app.post('/create', async (c) => {
    const data = await c.req.valid(bodySchema);
    return c.json({ message: 'Data received', data });
  });

### Explanation

- **zValidator Middleware:**  
  - `zValidator("param", z.object({ test: z.string() }))` attaches a validator for the URL parameter.  
  - The string `"param"` is used as a key for storing the validated result.

- **Retrieving Validated Data:**  
  - In the route handler, `c.req.valid('param')` retrieves the validated parameter, ensuring that `test` is a string.

- **Why It’s Preferred:**  
  - This approach uses Hono’s built-in integration with Zod, making your middleware chain explicit and modular.
  - It promotes clearer separation between validation logic and route handling.


- **Chaining Validators:**  
  You can attach multiple validators (for example, one for URL parameters and one for the JSON body) to a single route. Each middleware in the chain will validate and transform the request data accordingly, ensuring end-to-end type safety.

---

## 3. Protected API Routes with Clerk Middleware
Below is a comprehensive, well-structured set of notes covering how to protect your API routes using Clerk Auth Middleware with HonoJS. These notes include all the points you mentioned, along with code examples and detailed explanations.

---

# Protecting API Routes with Clerk Auth Middleware

## Overview

Instead of using Next.js’s default middleware (which, when configured to protect API routes, redirects unauthorized users to the sign-in page), we want our API routes to return a JSON error when a user is not authenticated. This is ideal for API endpoints where a redirection is not desired. To achieve this, we’ll use the Clerk Auth middleware from HonoJS.

---

## 1. Traditional Next.js Middleware Approach (Not Recommended)

In your existing `middleware.ts`, you might have something like:

```ts
const isProtectedRoute = createRouteMatcher(['/'])
```

Changing it to:

```ts
const isProtectedRoute = createRouteMatcher(['/', '/api(.*)'])
```

This configuration causes any access to `http://localhost:3000/api/hello` to redirect to the sign-in page if the user isn’t authenticated. However, for API routes we want a JSON error response rather than a redirection.

---

## 2. Using Clerk Auth Middleware from HonoJS

### a. Installation

Install the required packages using your package manager (e.g., Bun):

```bash
bun add @hono/clerk-auth
bun add @clerk/backend
```

### b. Update Environment Variables

Make sure your `.env.local` file contains all the necessary Clerk keys. For example:

```env
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_bGVhZGluZy11cmNoaW4tMjMuY2xlcmsuYWNjb3VudHMuZGV2JA
CLERK_SECRET_KEY=sk_test_Jc66qot5INud0k6uPhiLnxj0VBvX3vvAn0Z7U0k35s

CLERK_PUBLISHABLE_KEY=pk_test_bGVhZGluZy11cmNoaW4tMjMuY2xlcmsuYWNjb3VudHMuZGV2JA

NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
NEXT_PUBLIC_CLERK_SIGN_IN_FALLBACK_REDIRECT_URL=/
NEXT_PUBLIC_CLERK_SIGN_UP_FALLBACK_REDIRECT_URL=/
```

### c. Implementing Clerk Middleware in Your API Route

Create (or update) your API route file (for example, `app/api/hello/route.ts`) with the following code:

```ts
import { Hono } from 'hono';
import { handle } from 'hono/vercel';
import { clerkMiddleware, getAuth } from '@hono/clerk-auth';

export const runtime = 'edge';

const app = new Hono().basePath('/api');

// Protected API route using Clerk middleware
app.get('/hello',
  // Add Clerk middleware to check authentication
  clerkMiddleware(),
  (c) => {
    const auth = getAuth(c);
    // Return JSON error if user is not authenticated
    if (!auth?.userId) {
      return c.json({ message: 'Unauthorized' }, 401);
    }
    // Otherwise, return a successful response with the userId
    return c.json({ 
      message: 'Hello Next.js!', 
      userId: auth.userId 
    });
  }
);

export const GET = handle(app);
export const POST = handle(app);
```

### d. Expected Outcomes

- **When the User Is NOT Logged In:**  
  Navigating to `http://localhost:3000/api/hello` will return:
  ```json
  {
    "message": "Unauthorized"
  }
  ```

- **When the User Is Logged In:**  
  Navigating to `http://localhost:3000/api/hello` will return:
  ```json
  {
    "message": "Hello Next.js!",
    "userId": "user_2uJ1AKONpb9F5WUwojeT9yPs4Kd"
  }
  ```

---

## 3. Explanation

- **Overwriting Next.js Default Behavior:**  
  Instead of Next.js using its file‑based routing with `NextResponse.json()`, we delegate request handling to a Hono app. This lets us chain middlewares (like Clerk’s auth middleware) before executing our route logic.

- **Clerk Middleware Integration:**  
  - **`clerkMiddleware()`** is added as middleware for the `/hello` route. It checks if the request is authenticated.
  - **`getAuth(c)`** retrieves the authenticated user details from the request context.
  - If the user is not authenticated, a JSON error is returned with a `401` status code.
  - Otherwise, the route handler returns a JSON response including the `userId`.

- **Advantages:**  
  - **Granular Control:** You can protect specific API routes and return custom JSON error responses instead of redirection.
  - **Modularity:** Middleware chaining allows you to add more validations, permissions, or logging as needed.
  - **Type Safety:** Hono and Clerk integration ensures you have access to strongly typed authentication data.

---

## Conclusion

Using Clerk Auth Middleware with HonoJS allows you to protect your API routes by returning a JSON error if the user is not authenticated, rather than redirecting them. This method is ideal for RESTful APIs where redirection is not appropriate. The integration process involves:
- Installing the necessary packages.
- Updating your environment variables.
- Adding Clerk middleware to your HonoJS route.
- Structuring your route to return a JSON error or a successful response based on the user’s authentication status.

These notes should serve as a comprehensive guide for protecting API routes with Clerk Auth Middleware in your Next.js project using HonoJS. Let me know if you need further clarifications or additional details!

## 4. Structuring and Scaling API Routes

- **Problem:**  
  As your API grows, having all routes in one file can become unwieldy.

- **Solution:**  
  Organize routes by entity into separate files (akin to controllers) without sacrificing type inference and safety.
  
  - **Example File Structure:**

    ```
    /app
      └── /api
          ├── authors.route.ts
          ├── books.route.ts
          └── index.route.ts
    ```
  
  - **In each file:**  
    Define the routes for that entity (e.g., authors, books) using Hono’s API.
  
  - **In a Root File:**  
    Import these separate route files and chain them under a single Hono app. This consolidated approach helps in generating a unified type definition (especially useful when later integrating RPC).

- **Note on Controllers:**  
  Although some frameworks encourage controllers, Hono’s design (with middleware chaining and type inference) favors having routes defined in separate files. Attempting to abstract routes into controllers can lead to complex generics that hinder type inference.

---

## 5. Implementing RPC with Hono (Advanced Topic)

- **RPC Overview:**  
  RPC allows you to share API specifications (schemas) between the server and client, streamlining the development process.
  
- **How It Works in Hono:**  
  - Instead of defining routes in isolated files, you chain them together under a single Hono app.
  - This unified app instance holds all route definitions, types, and context. It becomes easier to aggregate types and ensure end-to-end safety.
  
- **Integration Example:**  
  (See the chaining example in the previous section, but note that for RPC, you’d gather all routes under one `app` instance.)
  
  ```ts
  const app = new Hono().basePath('/api');

  app
    .get('/hello', (c) => {
      return c.json({ message: 'Hello Next.js!' });
    })
    .get('/hello/:test', (c) => {
      return c.json({ message: 'Hello Next.js!', test: c.req.param('test') });
    });

  export const GET = handle(app);
  export const POST = handle(app);
  ```
  
- **Benefits of RPC:**  
  - **Shared Schema:** The same validation schema (e.g., defined using Zod) can be used on both client and server.  
  - **End-to-End Type Safety:** Types for parameters, request bodies, and responses are enforced throughout the application.  
  - **Maintainability:** Aggregated routes make it easier to manage and update API specifications as your project grows.

---

## 6. Summary

- **Basic API Routes:**  
  Start by creating simple file‑based API routes in Next.js using `NextResponse.json()` and folder structures (with and without parameters).

- **HonoJS API Routes:**  
  Replace Next.js’s native API routing with a HonoJS app to gain:
  - Expressive, chainable route definitions.
  - Middleware chaining for validations, authentication, and more.
  - End-to-end type safety when combined with Zod.

- **Middleware & Validators:**  
  Use Zod validators to enforce parameter and JSON body types. Chain multiple middleware functions to compose complex validations and protections.

- **Protected Routes with Clerk:**  
  Integrate Clerk middleware with Hono to return JSON errors for unauthorized API access without redirecting.

- **Scalable Structure & RPC:**  
  As your API expands, organize routes into separate files (per entity) and eventually consolidate them into a unified Hono app. This paves the way for RPC, allowing shared API specifications and robust type safety.
